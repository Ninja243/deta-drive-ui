{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","componentDidMount","a","state","projectKey","driveName","refreshFiles","deta","Deta","drive","Drive","list","everything","setState","forEach","element","tempObj","key","files","push","handleSelected","prefix","name","get","then","e","downloadURL","window","URL","webkitURL","createObjectURL","console","log","updateProjectKeyInputTextValue","evt","target","value","updateDriveNameTextValue","uploadStoredFiles","filesToUpload","file","fr","FileReader","contentType","includes","slice","Math","max","lastIndexOf","Infinity","substring","onload","array","Uint8Array","result","resultPromise","put","splice","indexOf","readAsArrayBuffer","length","error","_projectKeyInputText","_driveNameInputText","errorText","previewFile","count","uploadModalVisible","fileDropText","className","role","aria-label","href","alt","src","this","rel","onClick","type","startsWith","url","controls","readAsText","delete","location","FileDrop","onDrop","event","preventDefault","onSelect","onChange","placeholder","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b65ab015.chunk.js","sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\n\nimport { Component } from 'react';\n\n\nimport FileBrowser from 'react-keyed-file-browser'\n\nimport { Deta } from \"deta/dist/index\";\n\nimport { FileDrop } from 'react-file-drop';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      _projectKeyInputText: \"\",\n      _driveNameInputText: \"\",\n      errorText: null,\n      previewFile: null,\n      count: 0,\n      files: [],\n      projectKey: null, // \"a0wrh1g2_HdF5xo6FkZjP1CAhGKd5aReAbTno332s\",\n      driveName: null, // \"testDrive\",\n      uploadModalVisible: false,\n      filesToUpload: [],\n      fileDropText: \"Drop your files here\"\n    }\n  }\n\n  componentDidMount = async () => {\n    // TODO check env var\n    if (this.state.projectKey !== null && this.state.driveName !== null) {\n      this.refreshFiles()\n    }\n  }\n\n  refreshFiles = async () => {\n    var deta = Deta(this.state.projectKey)\n    var drive = deta.Drive(this.state.driveName)\n    var everything = await drive.list()\n    this.setState({ \"files\": [], \"filesToUpload\": [], })\n    everything['names'].forEach(async (element) => {\n      let tempObj = {\n        key: element,\n        // modified: null,\n        // size: null\n      }\n      this.state.files.push(tempObj)\n    })\n    this.setState({})\n  }\n\n  handleSelected = (files, prefix) => {\n    var deta = Deta(this.state.projectKey)\n    var drive = deta.Drive(this.state.driveName)\n    let name = files.key\n    if (typeof prefix === \"undefined\") {\n      drive.get(name).then(e => {\n        var urlCreator = window.URL || window.webkitURL;\n        let downloadURL = urlCreator.createObjectURL(e);\n        console.log(e)\n        this.setState({\n          \"previewFile\": {\n            \"url\": downloadURL,\n            \"file\": e,\n            \"name\": name\n          }\n        })\n      })\n    } else {// TODO\n      drive.get(prefix + files.key)\n    }\n\n  }\n\n  updateProjectKeyInputTextValue = (evt) => {\n    this.setState({\n      \"_projectKeyInputText\": evt.target.value\n    })\n  }\n\n  updateDriveNameTextValue = (evt) => {\n    this.setState({\n      \"_driveNameInputText\": evt.target.value\n    })\n  }\n\n  uploadStoredFiles = async () => {\n    const deta = Deta(this.state.projectKey)\n    const drive = deta.Drive(this.state.driveName)\n    console.log(this.state.filesToUpload)\n\n    for (const file of this.state.filesToUpload) {\n      console.log(file)\n      const fr = new FileReader();\n      let contentType = \"binary/octet-stream\"\n      const images = [\"bmp\", \"cod\", \"gif\", \"ief\", \"jpe\", \"jpeg\", \"jpg\", \"jfif\", \"png\", \"svg\"]\n      const videos = [\"mp4\", \"webm\"]\n      const sounds = [\"wav\", \"wave\", \"ogg\", \"mp3\"]\n      if (images.includes(file.name.slice((Math.max(0, file.name.lastIndexOf(\".\")) || Infinity) + 1))) {\n        contentType = \"image/\" + file.name.substring(file.name.lastIndexOf('.') + 1);\n      }\n      if (videos.includes(file.name.slice((Math.max(0, file.name.lastIndexOf(\".\")) || Infinity) + 1))) {\n        contentType = \"video/\" + file.name.substring(file.name.lastIndexOf('.') + 1);\n      }\n      if (sounds.includes(file.name.slice((Math.max(0, file.name.lastIndexOf(\".\")) || Infinity) + 1))) {\n        contentType = \"audio/\" + file.name.substring(file.name.lastIndexOf('.') + 1);\n      }\n      fr.onload = () => {\n        const array = new Uint8Array(fr.result);\n        const resultPromise = drive.put(file.name, { 'data': array, 'contentType': contentType }).then(() => {\n          // Success\n          if (resultPromise !== null) {\n            this.setState({\n              filesToUpload: this.state.filesToUpload.splice(this.state.filesToUpload.indexOf(file), 1),\n            })\n          }\n        })\n      }\n      console.log(fr)\n      fr.readAsArrayBuffer(file)\n      if (this.state.filesToUpload.length > 0) {\n        console.error(\"Failed to upload files\", this.state.filesToUpload)\n      }\n    }\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"w2 pcolor\">\n\n          <br />\n          <br />\n\n          <nav className=\"navbar pcolor\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n              <a className=\"navbar-item nav1\" href=\"https://deta.sh\">\n                <img alt=\"\" src=\"https://uploads-ssl.webflow.com/5eb96efa78dc680fc15be3be/5ec58c9b49c21c4535eead5a_logo-250.png\" className=\"img1\"></img>\n              </a>\n              <h2 className=\"navbar-item header1\"> Deta Drive Explorer</h2>\n\n            </div>\n\n          </nav>\n\n          {!(this.state.projectKey !== null && this.state.driveName !== null) ?\n            <header>\n              <h3 className=\"subtitle is-4\">Exploring your Deta Drive is now only a few clicks away! <br /><i>Heavily</i> based on <a href=\"https://explorer.deta.dev/\" target=\"_blank\" rel=\"noreferrer\">Deta Base Explorer</a>. Check out the code for\n                  this project at <span><a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/Ninja243/deta-base-explorer\">GitHub</a></span>.\n                </h3>\n            </header>\n            :\n            <div className=\"signOut\">\n              <button onClick={() => { this.setState({ \"driveName\": null, \"projectKey\": null }); }}>Sign out</button>\n            </div>\n\n          }\n\n\n          <section >\n            {(this.state.projectKey !== null && this.state.driveName !== null) ?\n\n              this.state.previewFile !== null ?\n\n                <div>\n                  <h1 className=\"previewHeader\">Preview</h1>\n                  <button onClick={() => { this.refreshFiles(); this.setState({ \"previewFile\": null }) }}>&#8249;</button>\n                  {this.state.previewFile.file.type?.startsWith(\"image\") ?\n                    <div className=\"preview\"><img alt=\"A preview of the stored file\" src={this.state.previewFile.url}></img></div> :\n                    this.state.previewFile.file.type?.startsWith(\"video\") ?\n                      <div className=\"preview\"><video src={this.state.previewFile.url}></video></div> :\n                      this.state.previewFile.file.type?.startsWith(\"audio\") ?\n                        <div className=\"preview\"><audio src={this.state.previewFile.url} controls></audio></div> :\n                        this.state.previewFile.file.type?.startsWith(\"text\") ?\n                          <div className=\"preview\"><pre>{(new FileReader().onload = (e) => { return e }).readAsText(this.state.previewFile.file)}</pre></div> :\n                          <div className=\"preview\"><h3>File can't be previewed</h3></div>\n                  }\n                  <div className=\"controls\">\n\n                    <button onClick={() => {\n                      var deta = Deta(this.state.projectKey)\n                      var drive = deta.Drive(this.state.driveName)\n                      drive.delete(this.state.previewFile.name)\n                      this.state.files.splice(this.state.files.indexOf(this.state.previewFile), 1)\n                      this.setState({ \"previewFile\": null })\n                      this.refreshFiles()\n                    }}>\n                      Delete {this.state.previewFile.name}\n                    </button>\n                    <button onClick={() => {\n                      window.location.href = this.state.previewFile.url\n                    }\n                    }>Download {this.state.previewFile.name}</button>\n                  </div>\n                </div>\n\n                :\n                <div>\n                  {this.state.uploadModalVisible ? <div >\n                    <button onClick={() => {\n                      this.setState({\n                        \"uploadModalVisible\": false\n                      })\n                    }}>&#8249;</button>\n                    <FileDrop className=\"uploadBox\" onDrop={(files, event) => {\n                      event.preventDefault()\n                      this.setState({\n                        \"filesToUpload\": files\n                      }, () => {\n                        this.setState({\n                          \"fileDropText\": \"Uploading ...\"\n                        }, () => {\n                          this.uploadStoredFiles().then(() => {\n                            this.setState({\n                              fileDropText: \"Drop your files here\",\n                              uploadModalVisible: false\n                            }, () => {\n                              this.refreshFiles()\n                            })\n                          })\n                        })\n                        \n\n                      })\n                    }}>\n                      {this.state.fileDropText}\n                    </FileDrop>\n\n                  </div> :\n                    <div>\n                      <button onClick={() => {\n                        this.setState({\n                          \"uploadModalVisible\": true\n                        })\n                      }}>Upload files</button>\n                      <button className=\"refreshButton\" onClick={() => {\n                        this.refreshFiles()\n                      }}>Refresh</button>\n                      <FileBrowser className=\"fb\"\n                        files={this.state.files}\n                        onSelect={this.handleSelected}\n                      />\n                    </div>\n                  }\n\n                </div>\n\n              :\n              <div>\n                <h1>Enter your drive info</h1>\n                <div className=\"signInForm\">\n                  <input value={this.state._projectKeyInputText} onChange={evt => this.updateProjectKeyInputTextValue(evt)} placeholder=\"Project key\"></input>\n                  <br></br>\n                  <input value={this.state._driveNameInputText} onChange={evt => this.updateDriveNameTextValue(evt)} placeholder=\"Drive Name\"></input>\n                  <br></br>\n                  <button onClick={() => {\n                    try {\n                      const deta = Deta(this.state._projectKeyInputText)\n                      const drive = deta.Drive(this.state._driveNameInputText)\n                      drive.list()\n\n\n                      this.setState({ ...this.setState, projectKey: this.state._projectKeyInputText, driveName: this.state._driveNameInputText }, () => {\n                        console.log(this.state.projectKey)\n                        console.log(this.state.driveName)\n                        this.refreshFiles()\n                      })\n                    } catch {\n                      this.setState({\n                        \"errorText\": \"Something's not right with your credentials. Please check them and try again.\"\n                      })\n                    }\n                  }}>Sign in</button>\n                </div>\n                <br></br>\n                {this.state.errorText === null ? <span></span> : <p className=\"signInError\">{this.state.errorText}</p>}\n\n              </div>\n            }\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}